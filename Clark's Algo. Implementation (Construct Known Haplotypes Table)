""" Class data structure section and main sections are only included for testing the code.
Clark's Method Implementation (doesn't calculate for genotypes with 2+ heterozygous positions
that are not explained by the list of "known haplotypes" """

from random import *

class genotype_data:
    haplotype1 = ''
    haplotype2 = ''
    genotype = ''
    position = 0
    def addGenotype(self, data):
        self.genotype = data
    def addHaplotype1(self, data):
        self.haplotype1 += data
    def addHaplotype2(self, data):
        self.haplotype2 += data

#Finding genotypes with less than 2 heterozygous positions
def L2H(genotype_data):
    count = 0
    for i in genotype_data:
        if i == '1':
            count += 1
    return(count)

#Generates all the possible phases for genotypes that have 1 or less heterozygous positions.
#Adds the 2H+ genotypes to a separate list
def generatePhases(genolist,phaselist,M2Hlist):
    for elem in range(len(genolist)):
        data = genolist[elem].genotype
        if L2H(data) == 0:
            if data not in genolist:
                phaselist.append(data)
        if L2H(data) == 1:
            #Included randomization, to prevent biases of always choosing "0" first to explain a heterozygous position
            x = randint(1,100)
            string1 = data.replace('1','0')
            string2 = data.replace('1','2')
            if x > 49:
                tempstring = string1
                string1 = string2
                string2 = tempstring
            if string1 not in genolist:
                phaselist.append(string1)
            if string2 not in genolist:
                phaselist.append(string2)
        else:
            if data not in M2Hlist:
                M2Hlist.append(data)

#Remove duplicates which appear in a list
def removedup(list):
    nodup = []
    for elem in list:
        if elem not in nodup:
            nodup.append(elem)
    return(nodup)

#Finds the remaining haplotypes which could describe the genotypes that have more than 1 heterozygous positions,
#using the list of known haplotypes.
def findCompatibleHaplotype(Haplolist, Genotype):
    CompatibleHaplo = ''
    listofcompatible = []
    for elem in Haplolist:
        for i in range(len(Genotype)):
            if Genotype[i] == '1':
                if elem[i] == '0':
                    CompatibleHaplo += '2'
                if elem[i] == '2':
                    CompatibleHaplo += '0'
            elif elem[i] != Genotype[i]:
                CompatibleHaplo = ''
                break
            else:
                CompatibleHaplo += Genotype[i]
        if len(CompatibleHaplo) == len(Genotype):
            listofcompatible.append(CompatibleHaplo)
            CompatibleHaplo = ''
    CompatibleHaplo = compatiblePair(listofcompatible,Genotype)
    return(CompatibleHaplo)

#If a pair of haplotypes can explain a genotype, no need to construct a new compatible haplotype!
def compatiblePair(CompatibleList,Genotype):
    comparingString = ''
    for elem in CompatibleList:
        for i in range(len(Genotype)):
            if Genotype[i] == '1':
                if elem[i] == '0':
                    comparingString += '2'
                if elem[i] == '2':
                    comparingString += '0'
            else:
                comparingString += Genotype[i]
        if comparingString in CompatibleList:
            return(comparingString)
        else:
            comparingString = ''
    #If no pairs have been found, then randomly select one of the compatibleList haplotyoes and return it.
    if not CompatibleList:
        return('')
    x = 0
    if len(CompatibleList) > 1:
        x = randint(0,len(CompatibleList) - 1)
    return(CompatibleList[x])

# "Master Function" Which ends up generating a unique set of Haplotypes that are described by the given set of genotypes
def generateKnownHaplotypes(data):
    phase = []
    M2HList = []
    generatePhases(data,phase,M2HList)
    norepeatphase= removedup(phase)
    phase = []

#Proceed to find the remaining haplotype phases which explain the genotypes with more than one heterozygous position
#only adds additional haplotypes, if pre-exiting haplotype explains the genotype.
    for elem in M2HList:
        newhaplo = findCompatibleHaplotype(norepeatphase,elem)
        if newhaplo == '':
            print("Cannot be computed by Clark's Algorithm.")
        else:
            if newhaplo not in norepeatphase:
                norepeatphase.append(newhaplo)
    for elem in norepeatphase:
        string1 = elem.replace('2', '1')
        phase.append(string1)

    return(phase)

def main():
    list = ['11210','01000','11110','02100','20210']
    newlist = []
    for elem in list:
        d = genotype_data()
        d.addGenotype(elem)
        newlist.append(d)

    KnownHaplotypes = generateKnownHaplotypes(newlist)
    print(KnownHaplotypes)

    # Should contain only 01000, 01100, 10110, 10100, 00000

main()
